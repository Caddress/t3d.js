import { Object3D } from './Object3D.js';
import { Matrix4 } from '../math/Matrix4.js';
import { LightData } from '../render/LightData.js';
import { RenderQueue } from '../render/RenderQueue.js';
import { SceneData } from '../render/SceneData.js';
import { RenderStates } from '../render/RenderStates.js';

/**
 * Scenes allow you to set up what and where is to be rendered by t3d.
 * This is where you place objects, lights and cameras.
 * @constructor
 * @memberof t3d
 * @extends t3d.Object3D
 */
class Scene extends Object3D {

	/**
	 * Create a scene.
	 */
	constructor() {
		super();

		/**
		 * A {@link t3d.Fog} instance defining the type of fog that affects everything rendered in the scene.
		 * @type {t3d.Fog}
		 * @default null
		 */
		this.fog = null;

		/**
		 * If not null, this texture is set as the environment map for all materials in the scene.
		 * However, it's not possible to overwrite an existing texture assigned to Material.envMap.
		 * @type {t3d.TextureCube | Null}
		 * @default null
		 */
		this.environment = null;

		/**
		 * The Intensity of IBL (image based lighting) witch is generated by the environment map.
		 * @type {Number}
		 * @default 1
		 */
		this.environmentLightIntensity = 1;

		/**
		 * User-defined clipping planes specified as {@link t3d.Plane} objects in world space.
		 * These planes apply to the scene.
		 * Points in space whose dot product with the plane is negative are cut away.
		 * @type {t3d.Plane[]}
		 * @default []
		 */
		this.clippingPlanes = [];

		/**
		 * Defines whether disable shadow sampler feature.
		 * Shader with sampler2DShadow uniforms may cause unknown error on some android phones, set disableShadowSampler to true to avoid these bugs.
		 * When this property is set to true, soft shadow types will fallback to POISSON_SOFT without warning.
		 * @type {Boolean}
		 * @default false
		 */
		this.disableShadowSampler = false;

		/**
		 * whether to use a logarithmic depth buffer. It may be neccesary to use this if dealing with huge differences in scale in a single scene.
		 * Note that this setting uses gl_FragDepth if available which disables the Early Fragment Test optimization and can cause a decrease in performance.
		 * @type {Boolean}
		 * @default false
		 */
		this.logarithmicDepthBuffer = false;

		/**
		 * The anchor matrix of the world coordinate system.
		 * If it is not an identity matrix, the actual lighting calculating and the world position in the shader, will be in the anchor coordinate system.
		 * By setting this property, you can solve the floating point precision problem caused by the rendering object far away from the origin of the world coordinate system.
		 * In addition, by setting the rotation, it can also repair the direction of the reflection.
		 * @type {t3d.Matrix4}
		 */
		this.anchorMatrix = new Matrix4();

		this._sceneData = new SceneData();
		this._lightData = new LightData();
		this._skeletons = new Set();

		this._renderQueueMap = new WeakMap();
		this._renderStatesMap = new WeakMap();
	}

	/**
	 * Update {@link t3d.RenderStates} for the scene and camera.
	 * The light data in RenderStates will be empty unless calling {@link t3d.Scene#updateRenderQueue}.
	 * @param {t3d.Camera} camera - The camera.
	 * @param {Boolean} [updateScene=true] - Whether to update scene data.
	 * @return {t3d.RenderStates} - The result render states.
	 */
	updateRenderStates(camera, updateScene) {
		updateScene = updateScene !== undefined ? updateScene : true;

		if (!this._renderStatesMap.has(camera)) {
			this._renderStatesMap.set(camera, new RenderStates(this._sceneData, this._lightData));
		}

		const renderStates = this._renderStatesMap.get(camera);

		if (updateScene) {
			this._sceneData.update(this);
		}

		renderStates.updateCamera(camera);

		return renderStates;
	}

	/**
	 * Get {@link t3d.RenderStates} for the scene and camera.
	 * The RenderStates will be updated by calling {@link t3d.Scene#updateRenderStates}.
	 * The light data in RenderStates will be empty unless calling {@link t3d.Scene#updateRenderQueue}.
	 * @param {t3d.Camera} camera - The camera.
	 * @return {t3d.RenderQueue} - The target render queue.
	 */
	getRenderStates(camera) {
		return this._renderStatesMap.get(camera);
	}

	/**
	 * Update {@link t3d.RenderQueue} for the scene and camera.
	 * Collect all visible meshes (and lights) from scene graph, and push meshes to render queue.
	 * Light data will be stored in RenderStates.
	 * @param {t3d.Camera} camera - The camera.
	 * @param {Boolean} [collectLights=true] - Whether to collect light data.
	 * @param {Boolean} [updateSkeletons=true] - Whether to update skeletons.
	 * @return {t3d.RenderQueue} - The result render queue.
	 */
	updateRenderQueue(camera, collectLights, updateSkeletons) {
		collectLights = collectLights !== undefined ? collectLights : true;
		updateSkeletons = updateSkeletons !== undefined ? updateSkeletons : true;

		if (!this._renderQueueMap.has(camera)) {
			this._renderQueueMap.set(camera, new RenderQueue());
		}

		const renderQueue = this._renderQueueMap.get(camera);

		if (updateSkeletons) {
			this._skeletons.clear();
		}

		renderQueue.begin();

		if (collectLights) {
			this._lightData.begin();
			this._doPushObject(this, camera, renderQueue, updateSkeletons);
			this._lightData.end(this._sceneData);
		} else {
			this._doPushMesh(this, camera, renderQueue, updateSkeletons);
		}

		renderQueue.end();

		// Since skeletons may be referenced by different mesh, it is necessary to collect skeletons in the scene in order to avoid repeated updates.
		// For IOS platform, we should try to avoid repeated texture updates within one frame, otherwise the performance will be seriously degraded.
		if (updateSkeletons) {
			for (const skeleton of this._skeletons) {
				skeleton.updateBones(this._sceneData);
			}
		}

		return renderQueue;
	}

	/**
	 * Get {@link t3d.RenderQueue} for the scene and camera.
	 * The RenderQueue will be updated by calling {@link t3d.Scene#updateRenderQueue}.
	 * @param {t3d.Camera} camera - The camera.
	 * @return {t3d.RenderQueue} - The target render queue.
	 */
	getRenderQueue(camera) {
		return this._renderQueueMap.get(camera);
	}

	_doPushMesh(object, camera, renderQueue, updateSkeletons) {
		if (!object.visible) {
			return;
		}

		if (!!object.geometry && !!object.material && object.renderable) {
			renderQueue.push(object, camera);

			if (updateSkeletons && !!object.skeleton) {
				this._skeletons.add(object.skeleton);
			}
		}

		const children = object.children;
		for (let i = 0, l = children.length; i < l; i++) {
			this._doPushMesh(children[i], camera, renderQueue, updateSkeletons);
		}
	}

	_doPushObject(object, camera, renderQueue, updateSkeletons) {
		if (!object.visible) {
			return;
		}

		if (!!object.geometry && !!object.material && object.renderable) {
			renderQueue.push(object, camera);

			if (updateSkeletons && !!object.skeleton) {
				this._skeletons.add(object.skeleton);
			}
		} else if (object.isLight) {
			this._lightData.push(object);
		}

		const children = object.children;
		for (let i = 0, l = children.length; i < l; i++) {
			this._doPushObject(children[i], camera, renderQueue, updateSkeletons);
		}
	}

}

/**
 * @readonly
 * @type {Boolean}
 * @default true
 */
Scene.prototype.isScene = true;

export { Scene };
